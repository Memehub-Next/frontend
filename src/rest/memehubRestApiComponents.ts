/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { MemehubRestApiContext, useMemehubRestApiContext } from "./memehubRestApiContext";
import type * as Fetcher from "./memehubRestApiFetcher";
import { memehubRestApiFetch } from "./memehubRestApiFetcher";
import type * as Schemas from "./memehubRestApiSchemas";

export type AuthControllerIsUsernameAvailablePathParams = {
  username: string;
};

export type AuthControllerIsUsernameAvailableError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerIsUsernameAvailableVariables = {
  pathParams: AuthControllerIsUsernameAvailablePathParams;
} & MemehubRestApiContext["fetcherOptions"];

export const fetchAuthControllerIsUsernameAvailable = (variables: AuthControllerIsUsernameAvailableVariables, signal?: AbortSignal) =>
  memehubRestApiFetch<
    Schemas.AvailableDTO,
    AuthControllerIsUsernameAvailableError,
    undefined,
    {},
    {},
    AuthControllerIsUsernameAvailablePathParams
  >({
    url: "/auth/is-username-available/{username}",
    method: "get",
    ...variables,
    signal,
  });

export const useAuthControllerIsUsernameAvailable = <TData = Schemas.AvailableDTO>(
  variables: AuthControllerIsUsernameAvailableVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.AvailableDTO, AuthControllerIsUsernameAvailableError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useMemehubRestApiContext(options);
  return reactQuery.useQuery<Schemas.AvailableDTO, AuthControllerIsUsernameAvailableError, TData>(
    queryKeyFn({
      path: "/auth/is-username-available/{username}",
      operationId: "authControllerIsUsernameAvailable",
      variables,
    }),
    ({ signal }) => fetchAuthControllerIsUsernameAvailable({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CryptoCompareControllerCryptoPriceQueryParams = {
  base: string;
  quote: string;
};

export type CryptoCompareControllerCryptoPriceError = Fetcher.ErrorWrapper<undefined>;

export type CryptoCompareControllerCryptoPriceVariables = {
  queryParams: CryptoCompareControllerCryptoPriceQueryParams;
} & MemehubRestApiContext["fetcherOptions"];

export const fetchCryptoCompareControllerCryptoPrice = (variables: CryptoCompareControllerCryptoPriceVariables, signal?: AbortSignal) =>
  memehubRestApiFetch<
    Schemas.CryptoPriceDTO,
    CryptoCompareControllerCryptoPriceError,
    undefined,
    {},
    CryptoCompareControllerCryptoPriceQueryParams,
    {}
  >({ url: "/crypto/price", method: "get", ...variables, signal });

export const useCryptoCompareControllerCryptoPrice = <TData = Schemas.CryptoPriceDTO>(
  variables: CryptoCompareControllerCryptoPriceVariables,
  options?: Omit<reactQuery.UseQueryOptions<Schemas.CryptoPriceDTO, CryptoCompareControllerCryptoPriceError, TData>, "queryKey" | "queryFn">
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useMemehubRestApiContext(options);
  return reactQuery.useQuery<Schemas.CryptoPriceDTO, CryptoCompareControllerCryptoPriceError, TData>(
    queryKeyFn({
      path: "/crypto/price",
      operationId: "cryptoCompareControllerCryptoPrice",
      variables,
    }),
    ({ signal }) => fetchCryptoCompareControllerCryptoPrice({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/auth/is-username-available/{username}";
      operationId: "authControllerIsUsernameAvailable";
      variables: AuthControllerIsUsernameAvailableVariables;
    }
  | {
      path: "/crypto/price";
      operationId: "cryptoCompareControllerCryptoPrice";
      variables: CryptoCompareControllerCryptoPriceVariables;
    };
